%table.report.nojs
  %thead
    %tr
      %th on name
      %th loan id
      %th amount
      %th outstanding
      %th disbursed on
      %th installment
      %th{:colspan => 2} principal
      %th{:colspan => 2} interest
      %th{:colspan => 2} fee
      %th{:colspan => 2} total
    %tr
      %th
      %th
      %th
      %th
      %th
      %th
      %th due
      %th paid
      %th due
      %th paid
      %th due
      %th paid
      %th due
      %th paid
  %tbody
    - histories = LoanHistory.all(:loan_id => loans.map{|x| x.id}, :date => @date)
    - fees_applicable = Fee.due(loans.map{|x| x.id})
    - fees_paid       = Payment.all(:received_on => @date, :type => :fees, :loan_id => loans.map{|x| x.id})
    - tot_amount, tot_outstanding, tot_installments, tot_principal_due, tot_principal_paid, tot_interest_due, tot_interest_paid, tot_fee_due, tot_fee_paid, tot_total_due, tot_total_paid = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    - clients.group_by{|x| x.client_group}.sort_by{|x| x[0] ? x[0].name : "none"}.each do |group, client_grouped|
      %tr.group
        %td{:colspan => 14}
          =group ? group.name : "none"
      - grp_amount, grp_outstanding, grp_installments, grp_principal_paid, grp_principal_due, grp_interest_due, grp_interest_paid, grp_fee_due, grp_fee_paid, grp_total_due, grp_total_paid = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
      -client_grouped.sort_by{|x| x.name}.each do |client| 
        - loan_row_count = 0
        - loans.find_all{|x| x.client_id==client.id and x.disbursal_date}.each do |loan|
          - lh = histories.find_all{|x| x.loan_id==loan.id}.sort_by{|x| x.created_at}[-1]
          - loan_row_count += 1
          %tr{ :class => cycle('odd','') }
            - fee = 0
            %td
              %b= link_to client.name, resource(branch, center, client)
            %td
              = link_to loan.id, url(:quick_link, "loans", loan.id)
            %td.numeric
              - i = loan.amount
              %b= i.to_currency
              - tot_amount += i
              - grp_amount += i
            %td.numeric
              - i = lh ? lh.actual_outstanding_principal : 0
              %b= i.to_currency
              - tot_outstanding += i
              - grp_outstanding += i
            %td
              = loan.disbursal_date.to_s
            %td.numeric
              - i = loan.number_of_installments_before(date)
              = i
              - tot_installments += i
              - grp_installments += i
            %td.numeric
              - i = [(lh ? lh.principal_due : 0), 0].max
              = i.to_currency
              - tot_principal_due += i
              - grp_principal_due += i
            %td.numeric
              - i = (lh ? lh.principal_paid : 0)
              = i.to_currency
              - tot_principal_paid += i
              - grp_principal_paid += i
            %td.numeric
              - i = [(lh ? lh.interest_due : 0), 0].max
              = i.to_currency
              - tot_interest_due += i
              - grp_interest_due += i
            %td.numeric
              - i = [(lh ? lh.interest_paid : 0), 0].max
              = i.to_currency
              - tot_interest_paid += i
              - grp_interest_paid += i
            %td.numeric
              - fee_due = fees_applicable[loan.id] ? fees_applicable[loan.id].due : 0
              = fee_due.to_currency
              - tot_fee_due += fee_due
              - grp_fee_due += fee_due
            %td.numeric
              - fee_paid = fees_paid[loan.id] ? fees_paid[loan.id].amount : 0
              = fee_paid.to_currency
              - tot_fee_paid += fee_paid
              - grp_fee_paid += fee_paid
            %td.numeric
              - i = [(lh ? (lh.principal_due+lh.interest_due): 0), 0].max
              = (i+fee_due).to_currency
              - tot_total_due += (i + fee_due)
              - grp_total_due += (i + fee_due)
            %td.numeric
              - i = [(lh ? (lh.principal_paid+lh.interest_paid): 0), 0].max
              = (i+fee_paid).to_currency
              - tot_total_paid += (i + fee_paid)
              - grp_total_paid += (i + fee_paid)
        - if loan_row_count == 0
          %tr{ :class => cycle('odd','') }
            %td
              %b= link_to client.name, resource(branch, center, client)
            %td{ :colspan => 4 }
              %i nothing outstanding
      %tr{:style => 'border-bottom: 1px solid;'}
        %td{:colspan => 2}
        %td.numeric
          %b= grp_amount.to_currency
        %td.numeric
          %b= grp_outstanding.to_currency
        %td{:colspan => 2}
        %td.numeric
          %b= grp_principal_due.to_currency
        %td.numeric
          %b= grp_principal_paid.to_currency
        %td.numeric
          %b= grp_interest_due.to_currency
        %td.numeric
          %b= grp_interest_paid.to_currency
        %td.numeric
          %b= grp_fee_due.to_currency
        %td.numeric
          %b= grp_fee_paid.to_currency
        %td.numeric
          %b= grp_total_due.to_currency
        %td.numeric
          %b= grp_total_paid.to_currency
    %tr{:style => 'border-bottom: 2px solid;' }  
    %tr
      %td
      %td
      %td.numeric
        %b= tot_amount.to_currency
      %td.numeric
        %b= tot_outstanding.to_currency
      %td
      %td
      %td.numeric
        %b= tot_principal_due.to_currency
      %td.numeric
        %b= tot_principal_paid.to_currency
      %td.numeric
        %b= tot_interest_due.to_currency
      %td.numeric
        %b= tot_interest_paid.to_currency
      %td.numeric
        %b= tot_fee_due.to_currency
      %td.numeric
        %b= tot_fee_paid.to_currency
      %td.numeric
        %b= tot_total_due.to_currency
      %td.numeric
        %b= tot_total_paid.to_currency
      
  %tfoot    
    %tr
      %td{ :colspan => 15}  
