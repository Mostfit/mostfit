%xml
  %weeksheet
    %staff_member
      %id #{@staff_member.id}
      %name #{@staff_member.name}
    %date #{@date}
    - if @centers
      - @centers.sort_by{|x| x.meeting_time_hours*60 + x.meeting_time_minutes}.each do |center|
      - loans = center.loans
      - histories = LoanHistory.all(:loan_id => loans.map{|x| x.id}, :date => @date)
      - fees_applicable = Fee.due(loans.map{|x| x.id})
      - fees_paid       = {}
        %center
          %id #{center.id}
          %name #{center.name}
          %code #{center.code}
          %time "#{center.meeting_time_hours}:#{'%02d' % center.meeting_time_minutes}"
          - center.clients.group_by{|x| x.client_group}.sort_by{|x| x[0] ? x[0].name : "none"}.each do |group, client_grouped|
            %group
              %group_name #{group ? group.name : "none"}
              -client_grouped.sort_by{|x| x.name}.each do |client| 
                %client
                  %id #{client.id}
                  %name #{client.name}
                  - loans.find_all{|x| x.client_id==client.id and x.disbursal_date}.each do |loan|
                  - lh = histories.find_all{|x| x.loan_id==loan.id}.sort_by{|x| x.created_at}[-1]
                  - next if not lh
                  - next if LOANS_NOT_PAYABLE.include?(lh.status) and not (lh.principal_paid>0 or lh.interest_paid>0)
                    %loan_id #{loan.id}
                    %disbursal_on #{loan.disbursal_date.to_s}
                    %outstanding #{lh ? lh.actual_outstanding_principal : 0}
                    %installment #{loan.number_of_installments_before(@date)}
                    %principle #{[(lh ? lh.principal_due : 0), 0].max}
                    %interest #{[(lh ? lh.interest_due : 0), 0].max}
                    %fees #{fees_applicable[loan.id] ? fees_applicable[loan.id].due : 0}

