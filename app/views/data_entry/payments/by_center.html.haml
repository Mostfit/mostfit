- if @center and @date
  - @md = @center.meeting_day?(@date)
  %h1
    = link_to "Center #{@center.name}", resource(@center.branch, @center)
    = @date 
    - if @center
      (
      = Center.meeting_days[@date.wday]
      )

  - if not @errors.blank?
    .error
      - @errors.each do |error|
        == Loan <b>#{error.resource.class == Payment ? error.resource.loan.id : error.resource.id} :</b>
        = error.values.join("*")
        %br

  %a{ :name => 'weeksheet' }
  %table.narrow.form{:style => "width: 100%"}
    %tr.odd
      %td meeting at
      %td
        - if @md
          %b== #{@date} #{@center.meeting_time}
        - else
          %i no meeting today
      %td
        = link_to 'today', url(:enter_payments, :action => 'by_center', :for_date => Date.today, :center_id => @center.id) + '#weeksheet'
        &nbsp;|&nbsp;
        = link_to 'previous meeting', url(:enter_payments, :action => 'by_center', :for_date => @center.previous_meeting_date_from(@date), :center_id => @center.id) + '#weeksheet'
        &nbsp;|&nbsp;
        = link_to 'next meeting', url(:enter_payments, :action => 'by_center', :for_date => @center.next_meeting_date_from(@date), :center_id => @center.id) + '#weeksheet'
    %tr
      %td center manager
      %td
        = link_to @center.manager.name, resource(@center.manager)
      %td
        %form{:action => url(:enter_payments, :action => 'by_center'), :method => 'GET', :style => 'margin: 0px; padding: 0px;'}
          = date_select 'for_date', @date
          = hidden_field :name => :center_id, :value => @center.id
          = submit 'Go!',  :style => 'margin: 0px; padding: 0px;'
  %h1 Approvals
  - @loans_to_approve = @clients.loans(:approved_on => nil)
  - if @loans_to_approve.size > 0
    = form_for(@loan, :action => url(:loan_actions, 'approve', :return => resource(@branch, @center))) do
      = partial "loans/approve"
      = submit 'Approve these loans'
  - else
    No approvals today

  %h1 Disbursal
  - date_with_holiday = [@date, @date.holidays_shifted_today].max
  - @loans_to_disburse = @clients.loans(:scheduled_disbursal_date.lte => date_with_holiday, :disbursal_date => nil, :approved_on.not => nil)
  - if @loans_to_disburse.size > 0
    = form_for(@loan, :action => url(:loan_actions, :action => 'disburse', :return => resource(@branch, @center))) do
      = partial "loans/disburse", {:loans_to_disburse => @loans_to_disburse, :date => @date}
      = submit 'Disburse these loans'
  - else
    No disbursals today

  %h1 Fees
  - @fee_paying_loans   = @loans.collect{|x| {x => x.fees_payable_on(Date.today)}}.inject({}){|s,x| s+=x}
  - @fee_paying_clients = @clients.collect{|x| {x => x.fees_payable_on(Date.today)}}.inject({}){|s,x| s+=x}
  - @fee_paying_things = @fee_paying_clients + @fee_paying_loans
  - unless @fee_paying_things.values.inject({}){|s,x| s+=x}.length==0
    = form_for(@payment, :action => url(:enter_payments, :action => 'by_center', :return => resource(@branch, @center)), :onsubmit => "javascript: return confirm_for({'received_by': #{@center.manager.id};") do
      = hidden_field :name => :for_date, :value => @date
      Fees collected by
      = select :name => "payment[received_by]", :collection => staff_members_collection, :selected => @center.manager.id.to_s, :id => 'fees_received_by'
      %table.report.nojs{:style => "width:100%"}
        %thead
          %tr{:style => "font-size: 0.85em"}
            %th
              id
            %th
              Client
            %th
              Loan
            %th
              Total Fees Payable
            %th
              Fees Already Paid
            %th
              Fees Due Today
            %th
              Fees      
        - @fee_paying_things.each do |obj, fee|
          - next if fee.size==0
          %tr{:class => cycle('odd','even')}
            %td
              = obj.id
            %td.text
              = Loan.descendants.include?(obj.class) ? obj.client.name : obj.name
            %td.text
              = obj.description if obj.respond_to?("description")
            %td.text
              = obj.total_fees_due
            %td.text
              - obj.fees_paid.values.each do |fp|
                = "#{fp.keys}: #{fp.values}"
            %td.text
              - fee.each do |k,v|
                ="#{k}: #{v}"
            %td
              - klass = Loan.descendants.include?(obj.class) ? Loan : obj.class
              = text_field :name => "paid[#{klass.to_s.snake_case}][#{obj.id}]", :value => fee.values.inject(0){|s,x| s+=x}, :cols => "5", :style => "width:50px;" 
      = submit 'Pay Fees'
  - else
    No fees due today
    
  %h1 Payments
  = form_for(@payment, :action => url(:enter_payments, :action => 'by_center', :return => resource(@branch, @center)), :onsubmit => "if ($('#payments_received_by').val() != '#{@center.manager.id}') {return confirm('Payment receiver is not center manager. Proceed with payments?')};") do
    = hidden_field :name => 'for_date', :value => @date
    = hidden_field :name => 'center_id', :value => @center.id
    = partial :cds
    = submit 'Make Payments'

- else
  Choose a center to record a payment for
  = form_for(@payment, :action => url(:enter_payments, :action => 'by_center'), :method => :get) do
    %table
      %tr
        %th
          Centers paying today
        %td
          = select :name => 'center_id', :collection => centers_paying_today_collection(@date)
      %tr
        %th
          or any other center
        %td
          = text_field :name => 'center_text'
      %tr
        %th
          For Date
        %td
          = text_field :name => 'for_date', :value => @date || Date.today
    = submit 'Submit'
