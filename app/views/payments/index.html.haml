.shaded
  - if @loan and @loan.disbursal_date
    .graph{:style => "position: relative; top: 50px"}
      = ofc2(550, 400, 'http://' + (request.env['HTTP_HOST'] or 'example.org') + url(:graph_data, :action => 'loan', :id => @loan.id, :scope_unit => 'months', :scope_size => 3) )
  
  = error_messages_for @payment
  - if @loan.loan_history.length == 0 or (@loan.disbursal_date and @loan.payments.count > 0  and @loan.loan_history.max(:created_at).to_time < @loan.payments.max(:created_at).to_time)
    .error
      History of this loan is not updated. Click
      = link_to("here", url(:controller => "loans", :id => @loan.id, :action => "repair"))
      to repair
  %h1
    Loan
    = link_to "#{@loan.description}", url_for_loan(@loan)
    by client
    = link_to "#{@client.name}", resource(@branch, @center, @client)
  - @history = @loan.loan_history
  .menu-strip{:style => "margin-bottom: 0.5em; margin-left: 0px; margin-top: 0px"}
    = link_to 'edit this loan', url_for_loan(@loan, 'edit'), :class => "edit"
    = link_to 'make repayment', url_for_loan(@loan, 'payments/new'), :class => "add"
  
  %table.loan{ :style => 'width : 50%; border: solid 1px #c9c9c9' }
    %tr
      %th.odd{ :width => '30%', :rowspan => "2" } Application
      %td
        == <b>#{@loan.amount_applied_for}</b> @
        %b= format("%.2f%", @loan.interest_rate*100)
    %tr
      %td
        on
        = @loan.applied_on
        (
        = @loan.applied_on.strftime('%A')
        )
        by
        %b= link_to @loan.applied_by.name, resource(@loan.applied_by) if @loan.applied_by
    %tr
      %th.even{ :width => '30%', :rowspan => "2" } Sanction
      %td
        - if @loan.approved_on
          == <b>#{@loan.amount_sanctioned}</b> @
          %b= format("%.2f%", @loan.interest_rate*100)
        - else
          Not approved yet
    %tr
      %td
        - if @loan.approved_on
          on
          = @loan.approved_on
          (
          = @loan.approved_on.strftime('%A')
          )
          by
          %b= link_to @loan.approved_by.name, resource(@loan.approved_by) if @loan.approved_by
        - else
          %i approval is pending

    %tr
      %th.odd{ :width => '30%', :rowspan => "2" } Disbursal
      %td
        - if @loan.disbursal_date
          == <b>#{(@loan.amount).to_currency}</b> @
          %b= format("%.2f%", @loan.interest_rate*100)
        - else
          Not disbursed yet
    %tr
      %td
        - if @loan.disbursal_date
          on
          = @loan.disbursal_date
          (
          = @loan.disbursal_date.strftime('%A')
          )
          by
          %b= link_to @loan.disbursed_by.name, resource(@loan.disbursed_by) if @loan.disbursed_by
        - else
          to be disbursed on
          = @loan.scheduled_disbursal_date
          (
          = @loan.scheduled_disbursal_date.strftime('%A')
          )
        - if @loan.class.to_s.match(/^TakeOver/)
          %br
          %i 
            original loan disbursed on
            = @loan.original_disbursal_date
            (
            = @loan.original_disbursal_date.strftime('%A')
            )
    %tr
      %th.even Product
      %td
        = link_to @loan.loan_product.name, resource(@loan.loan_product)
        %br
        = @loan.loan_product.repayment_style.name if @loan.loan_product.repayment_style
    %tr
      %th.odd Installments
      %td
        = @loan.number_of_installments
        = @loan.installment_frequency
        == (#{@loan.number_of_installments_before(Date.today)} past installments)
    %tr
      %th.even First repayment
      %td
        - if @loan.payments(:type => [:principal, :interest]).empty?
          = @loan.scheduled_first_payment_date
          (
          = @loan.scheduled_first_payment_date.strftime('%A')
          )
          %br/
          %span.greytext (scheduled, no payments yet)
        - else
          = actual_first_payment = @loan.payments(:type => [:principal, :interest]).min(:received_on)
          (
          = actual_first_payment.strftime('%A')
          )
          %br/
          %span.greytext
            - if actual_first_payment == @loan.scheduled_first_payment_date
              as scheduled
            - elsif actual_first_payment
              = difference_in_days(@loan.scheduled_first_payment_date, actual_first_payment, ['days earlier', 'days later'])
              than scheduled
              == (#{@loan.scheduled_first_payment_date})
        - if @loan.class.to_s.match(/^TakeOver/)
          %br
          %i 
            Original first payment date
            = @loan.original_first_payment_date
            (
            = @loan.original_first_payment_date.strftime('%A')
            )
    %tr
      %th.odd
        Fees
      %td
        %ul
          - @loan.applicable_fees.each do |f|
            %li
              = f.description
              (
              = f.applicable_on.strftime('%A')
              )
              - fpaid = @loan.payments(:fee_id => f.fee_id).reduce(0){|s,p| s + p.amount}
              - if fpaid == f.amount
                %span.green 
                  Paid
                  = fpaid
              - else
                %span.red
                  Paid
                  = fpaid
          %li
            %b
              Total
              == #{(@loan.total_fees_paid).to_currency} / #{(@loan.total_fees_applicable).to_currency}
            - if @loan.fees_paid?
              %span.green Paid
            - else
              %span.red Unpaid fees exist
    %tr
      %th.even
        Status
      %td
        - st = @loan.status
        %h2{:class => st}
          = st.to_s.gsub('_', ' ')
        - if @status == :written_off
          by
          %b= link_to @loan.written_off_by.name, resource(@loan.written_off_by)
  
  
.shaded
  %div.tab_container.clearfix
    %ul.tabs
      %li#repayment_schedule Repayment Schedule
      %li#repayments_made Repayments made
      - if @loan.insurance_policy
        %li#insurance Insurance policy
      %li#audit Audits
      %li#misc Miscellaneous
      %li#history History
      %li#deleted Deleted Payments
      
    %div.tab
      %h2 
        Repayment schedule
        = link_to "Download pdf", url(:action =>'repayment_sheet', :controller => 'loans', :format => "pdf", :id =>@loan.id), :style => "float: right; margin-right: 25px", :class => "button"
      %table{ :style => 'width:98%; margin: auto' }
        %thead
          %tr{:style => "box-shadow: 0px 2px 2px #cfcfcf; -moz-box-shadow: 0px 2px 2px #cfcfcf;"}
            %th
            %th date due
            %th scheduled balance
            %th scheduled repayment
            %th actual balance
            %th actual repayments
            %th difference
        %tbody
        - first, passed = true, false  # these are for printing the "today" row
        - last_payment = @loan.payments.first(:order => [:received_on.desc])
        - last_payment_date = last_payment.received_on if last_payment
        - principal_so_far = interest_so_far = principal_received_so_far = interest_received_so_far = 0
        - i = 0
        - @history.each_with_index do |lh, i|
          - principal_so_far += lh.principal_due
          - interest_so_far += lh.interest_due
          - principal_received_so_far += lh.principal_paid
          - interest_received_so_far += lh.interest_paid
          - scheduled_principal = lh.scheduled_principal_due
          - scheduled_interest =  lh.scheduled_interest_due
          - if lh.date > Date.today and not passed
            - passed = true
            - if not first
              %tr{ :class => cycle('odd','') }
                %td{ :colspan => 6, :style => "text-align: center;" }
                  %span.greytext== today (#{Date.today})
          - first = false
          - if lh.date <= Date.today and lh.date >= (@loan.c_actual_first_payment_date || @loan.scheduled_first_payment_date)
            - default =  lh.actual_outstanding_total - lh.scheduled_outstanding_total
          - else
            - default = 0
          - default_class = default ? (default > 0 ? 'due' : (default < 0 ? 'overpaid' : 'paid')) : ""
          
          %tr{ :class => cycle('odd','even') }
            %td{:class => default_class}
              = [i - 2,0].max
            %td
              = lh.date
            %td
              %b= lh.scheduled_outstanding_principal.round(2)
            %td
              %b= (scheduled_principal + scheduled_interest).to_currency
              %br/
              %span.greytext== #{scheduled_principal.round(2)} principal + #{scheduled_interest.round(2)} interest
            %td
              - if last_payment_date and (lh.date <= last_payment_date or lh.date <= Date.today)
                %b= lh.actual_outstanding_principal.round(2)
            %td
              - if last_payment_date and (lh.date <= last_payment_date or lh.date <= Date.today)
                %b= (lh.principal_paid + lh.interest_paid)
                %br/
                %span.greytext
                  == #{lh.principal_paid.to_currency} principal + #{lh.interest_paid.to_currency} interest
            - if default
              %td{:class => (default > 0 ? 'due' : (default < 0 ? 'overpaid' : 'paid')) }
                %b
                  = default.to_currency
                %br/
                %span.greytext
                  = format("%.0f%", (default.abs.to_f / @loan.total_to_be_received) * 100)
                  = default <= 0 ? 'overpaid' : 'shortfall'
            - else
              %td
        %tfoot
          %tr
            %td{ :colspan => 7 }
    %div.tab
      %h2== Repayments #{link_to 'new repayment', url_for_loan(@loan, 'payments/new'), :class => "add grey_button"}
      - if @payments.blank?
        %p
          %i No repayments have been made so far.
      - else
        = partial "payments/list", {:pmts => @payments, :context => :received}
    - if @loan.insurance_policy
      %div.tab
        %input{:type => "hidden", :name => "_load_remote", :value => resource(@loan.insurance_policy)}
    %div.tab 
      %input{:type => "hidden", :name => "_load_remote", :value => resource(:audit_items, :model => "Loan", :id => @loan.id)}
    %div.tab
      %input{:type => "hidden", :name => "_load_remote", :value => url(:controller => :loans, :action => "misc", :id => @loan.id)}
    %div.tab 
      %input{:type => "hidden", :name => "_load_remote", :value => audit_trail_url}
    %div.tab
      - deleted_payments = Payment.with_deleted{ Payment.all(:loan_id => @loan.id, :deleted_at.not => nil) }
      - if @payments.blank?
        %h3 No deleted payments
      - else
        = partial "payments/deleted_payments", {:pmts => deleted_payments, :context => :deleted}


  
