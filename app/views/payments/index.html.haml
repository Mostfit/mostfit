- if @loan and @loan.disbursal_date
  .graph
    = ofc2(430, 250, 'http://' + (request.env['HTTP_HOST'] or 'example.org') + url(:graph_data, :action => 'loan', :id => @loan.id, :scope_unit => 'months', :scope_size => 3) )

= error_messages_for @payment
- if @loan.history.length == 0 or (@loan.disbursal_date and @loan.payments.count > 0  and @loan.history.max(:created_at).to_time < @loan.payments.max(:created_at).to_time)
  .error
    History of this loan is not updated. Click
    =link_to("here", url(:controller => "loans", :id => @loan.id, :action => "repair"))
    to repair
%h1
  Loan
  = link_to "##{@loan.id}", url_for_loan(@loan)
  by client
  = link_to "<i>#{@client.name}</i>", resource(@branch, @center, @client)
- @history = @loan.history
%table.narrow.form{ :style => 'width : 50%' }
  %tr.odd
    %td{ :width => '30%' } Amount disbursed
    %td
      -if @loan.disbursal_date
        == <b>#{(@loan.amount).to_currency}</b> @
        %b= format("%.2f%", @loan.interest_rate*100)
      -else
        Not disbursed yet
  %tr
    %td{ :width => '30%' } Amount sanctioned
    %td
      -if @loan.approved_on
        == <b>#{@loan.amount_sanctioned}</b> @
        %b= format("%.2f%", @loan.interest_rate*100)
      -else
        Not approved yet
  %tr
    %td{ :width => '30%' } Amount applied
    %td
      == <b>#{@loan.amount_applied_for}</b> @
      %b= format("%.2f%", @loan.interest_rate*100)
  %tr
    %td Product
    %td= @loan.loan_product.name
  %tr
    %td Type
    %td= @loan.discriminator
  %tr.odd
    %td Installments
    %td
      = @loan.number_of_installments
      = @loan.installment_frequency
      == (#{@loan.number_of_installments_before(Date.today)} past installments)
  %tr
    %td Application
    %td
      on
      = @loan.applied_on
      by
      %b= link_to @loan.applied_by.name, resource(@loan.applied_by)
  %tr.odd
    %td Approval
    %td
      - if @loan.approved_on
        on
        = @loan.approved_on
        by
        %b= link_to @loan.approved_by.name, resource(@loan.approved_by)
      - else
        %i approval is pending
  %tr
    %td Disbursed
    %td
      - if @loan.disbursal_date
        on
        = @loan.disbursal_date
        by
        %b= link_to @loan.disbursed_by.name, resource(@loan.disbursed_by)
      - else
        to be disbursed on
        = @loan.scheduled_disbursal_date
      - if @loan.class.to_s.match(/^TakeOver/)
        %br
        %i 
          original loan disbursed on
          = @loan.original_disbursal_date
  %tr.odd
    %td First repayment
    %td
      - if @loan.payments.empty?
        = @loan.scheduled_first_payment_date
        %br/
        %span.greytext (scheduled, no payments yet)
      - else
        = actual_first_payment = @loan.payments(:type => [:principal, :interest]).min(:received_on)
        %br/
        %span.greytext
          - if actual_first_payment == @loan.scheduled_first_payment_date
            as scheduled
          - elsif actual_first_payment
            = difference_in_days(@loan.scheduled_first_payment_date, actual_first_payment, ['days earlier', 'days later'])
            than scheduled
            == (#{@loan.scheduled_first_payment_date})
      - if @loan.class.to_s.match(/^TakeOver/)
        %br
        %i 
          Original first payment date
          = @loan.original_first_payment_date

  %tr
    %td
      Fees applicable
    %td
      - @loan.loan_product.fees.each do |f|
        = f.description
        %br
  %tr
    %td
      Fees paid
    %td
      == #{(@loan.total_fees_paid).to_currency} / #{(@loan.total_fees_due).to_currency}
      - if @loan.fees_paid?
        %span.green Paid
  %tr
    %td Status
    %td
      %b= status = @loan.status.to_s.gsub('_', ' ')
      - if @status == :written_off
        by
        %b= link_to @loan.written_off_by.name, resource(@loan.written_off_by)

= link_to 'edit this loan >>', url_for_loan(@loan, 'edit'), :class => "button"

%div.tab_container
  %ul.tabs
    %li#repayment_schedule Repayment Schedule
    %li#repayments_made Repayments made
    %li#audit Audits
    %li#misc Miscellaneous
    %li#history History

  %div.tab
    %h2== Repayment schedule
    %table.narrow.form{ :width => '100%' }
      %thead
        %tr
          %th
          %th date due
          %th scheduled balance
          %th scheduled repayment
          %th actual balance
          %th actual repayments
          %th difference
      %tbody
      - first, passed = true, false  # these are for printing the "today" row
      - last_payment = @loan.payments.first(:order => [:received_on.desc])
      - last_payment_date = last_payment.received_on if last_payment
      - principal_so_far = interest_so_far = principal_received_so_far = interest_received_so_far = 0
      - @history.each_with_index do |lh, i|
        - principal_so_far += lh.principal_due
        - interest_so_far += lh.interest_due
        - principal_received_so_far += lh.principal_paid
        - interest_received_so_far += lh.interest_paid
        - scheduled_principal = i > 0 ? @history[i-1].scheduled_outstanding_principal - lh.scheduled_outstanding_principal : 0
        - scheduled_interest = i > 0 ? @history[i-1].scheduled_outstanding_total - lh.scheduled_outstanding_total - scheduled_principal : 0
        - if lh.date > Date.today and not passed
          - passed = true
          - if not first
            %tr{ :class => cycle('odd','') }
              %td{ :colspan => 6, :style => "text-align: center;" }
                %span.greytext== today (#{Date.today})
        - first = false
        %tr{ :class => cycle('odd','') }
          %td &nbsp;
          %td
            = lh.date
          %td
            %b= lh.scheduled_outstanding_principal.to_currency
          %td
            %b= (scheduled_principal + scheduled_interest).to_currency
            %br/
            %span.greytext== #{scheduled_principal.to_currency} principal + #{scheduled_interest.to_currency} interest
          %td
            - if last_payment_date and (lh.date <= last_payment_date or lh.date <= Date.today)
              %b= lh.actual_outstanding_principal.to_currency
          %td
            - if last_payment_date and (lh.date <= last_payment_date or lh.date <= Date.today)
              %b= (lh.principal_paid + lh.interest_paid).to_currency
              %br/
              %span.greytext
                == #{lh.principal_paid.to_currency} principal + #{lh.interest_paid.to_currency} interest
          %td
            - if lh.date <= Date.today
              %b
                %span{ :class => (lh.amount_in_default > 0 ? 'red' : 'green') }
                  = lh.amount_in_default.to_currency
              %br/
              %span.greytext
                %span{ :class => (lh.amount_in_default > 0 ? 'red' : 'green') }
                  = format("%.0f%", (lh.amount_in_default.abs.to_f / @loan.total_to_be_received) * 100)
                = lh.amount_in_default <= 0 ? 'overpaid' : 'shortfall'
      %tfoot
        %tr
          %td{ :colspan => 7 }
  %div.tab
    =partial "payments/list"
  %div.tab 
    %input{:type => "hidden", :name => "_load_remote", :value => resource(:audit_items, :model => "Loan", :id => @loan.id)}
  %div.tab
    %input{:type => "hidden", :name => "_load_remote", :value => url(:controller => :loans, :action => "misc", :id => @loan.id)}
  %div.tab 
    %input{:type => "hidden", :name => "_load_remote", :value => audit_trail_url}
