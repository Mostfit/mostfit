- models = DataMapper::Model.descendants.map{|d| d}
- if @objects.length>0
  - relations = @model.relationships.reject{|name, rel| rel.class!=DataMapper::Associations::ManyToOne::Relationship}.inject({}){|s,x| s+={x[1].child_key.collect{|y| y.name}.first => x[0]}}
  - model_names = constants_to_strings(@search.models)
  = partial "bookmarks/form", :bookmark_type => 'custom_reports'
  %div{:style => "padding-right: 35px;"}
    %h2
      - klass = @objects.first.class.ancestors.include?(Loan) ? "loan" : @objects.first.class.to_s.snake_case
      = klass.camelcase
    %table
      %tr
        -@fields.each do |model, props|
          - keys = props.keys
          - keys.each do |key|
            %th
              -if model==klass
                =key.camelcase(' ')
              -else
                = model+' '+key.camelcase(' ')     
      -@objects.each do |obj|
        %tr
          -@fields.each do |model, props|
            - keys = props.keys
            - keys.each do |key|
              -if model==klass
                -if relations.find{|k,v| v==key} and obj.respond_to?(key) and child_obj = obj.send(key)
                  %td
                    =child_obj.respond_to?(:name) ? child_obj.name : child_obj
                -elsif obj.respond_to?(key)
                  %td
                    =obj.send(key)
                -else
                  %td
                    =obj
              -elsif obj.respond_to?(model)
                -nested_obj=obj.send(model)
                %td
                  - if nested_obj.respond_to?(key)
                    = nested_obj.send(key)
                  - else 
                    =nested_obj.respond_to?(:name) ? nested_obj.name : nested_obj
              -else
                - path = get_path(model_names, model, klass)
                - nested_obj= obj
                - while(func=path.pop)
                  - nested_obj = nested_obj.send(func)
                - if nested_obj
                  %td
                    - if nested_obj.respond_to?(key)
                      - val = nested_obj.send(key) 
                      - if not models.include?(val.class)
                        =val
                      -elsif val.respond_to?(:name)
                        =val.name
                      -else
                        =val.to_s
                    - elsif nested_obj.respond_to?(:name)
                      = nested_obj.name
                    - elsif nested_obj.respond_to?(:to_s)
                      = nested_obj.to_s
                    - else
                      =nested_obj
-else
  No records
