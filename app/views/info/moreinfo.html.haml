#moreinfo
  -if @render_form
    =form(:action => "/info/moreinfo/#{@obj.id}?for=#{@obj.class.name.snake_case}", :class => "_remote_") do
      %input{:type => 'hidden', :value => "moreinfo", :name => "_target_"}
      %b From
      =date_select "from_date", @from_date
      %b To
      - if params[:type] and params[:type]=="managed"
        = @to_date
        =hidden_field :to_date, :value => @to_date
      - else
        =date_select "to_date", @to_date
      - if params[:type]
        = hidden_field :type, :value => params[:type]
      =submit "GO"
  %table.moreinfo.shaded
    %tr
      %td
        ="#{@obj.class.name} formation date"
      %td{:colspan => "2"}
        - if @obj.respond_to?(:creation_date)
          = @obj.creation_date
        - elsif @obj.respond_to?(:created_at)
          = @obj.created_at.strftime(Mfi.first.date_format)        
    - if @areas
      %tr
        %td
          Number of Areas
        %td
          =@areas.count
    %thead
      %tr
        %td{:style => "background: #eee;"}
          &nbsp;
        %th
          %b New
        %th.purple
          %b Total
    -if @branches
      %tr
        %td
          Number of Branches
        %td
          =@branches[:new].count
        %td
          =@branches[:upto].count
    -if @centers and not @obj.class==Center
      %tr
        %td
          Number of Centers
        %td.lightpurple
          =@centers_new_count
        %td.purple
          =@centers_upto_count
    %tr
      %td
        Number of Groups
      %td.lightpurple
        -if @groups_new_count then
          = @groups_new_count
        -else
          = 0
      %td.purple
        -if @groups_upto_count
          = @groups_upto_count
        -else
          = 0
    %tr
      %td
        Number of Clients
      %td.lightpurple
        - if @clients_new_count
          = @clients_new_count
        - else
          = 0
      %td.purple
        - if @clients_upto_count
          = @clients_upto_count
        - else
          = 0
    - if @death_cases
      %tr
        %td
          Number of death Cases
        %td.lightpurple
          =(@death_cases and @death_cases.length>0) ? @death_cases : 0
        %td.purple
          =(@total_death_cases and @total_death_cases.length>0) ? @total_death_cases : 0
    - if @pending_death_cases
      %tr
        %td
          Number of pending death Cases
        %td.lightpurple
          = '-'
        %td.purple
          =(@pending_death_cases and @pending_death_cases.length>0) ? @pending_death_cases : 0  
    %tr
      %td
        Borrower clients
      %td.lightpurple
        =(@loan_disbursed and @loan_disbursed.length>0) ? @loan_disbursed.client_count : 0
      %td.purple
        =(@total_disbursed and @total_disbursed.length>0) ? @total_disbursed.client_count : 0
    %tr
      %td
        Number of Loans
      %td.lightpurple
        =(@loan_disbursed) ? @loan_disbursed.loan_count : 0
      %td.purple
        =(@total_disbursed) ? @total_disbursed.loan_count : 0  
    %tr
      %td
        Number of loans Repaid
      %td.lightpurple
        =(@loans_repaid) ? @loans_repaid : 0
      %td.purple
        =(@loans_repaid_total) ? @loans_repaid_total : 0
    %tr
      %td
        Amount Disbursed
      %td.lightpurple
        =(@loan_disbursed and @loan_disbursed.amount) ? @loan_disbursed.amount.to_currency : 0
      %td.purple
        =(@total_disbursed and @total_disbursed.amount) ? @total_disbursed.amount.to_currency : 0
    %tr
      %td
        Principal Received
      %td.lightpurple
        =(@payments and @payments[:principal]) ? @payments[:principal].to_currency : "0"
      %td.purple
        =(@total_payments and @total_payments[:principal]) ? @total_payments[:principal].to_currency : "0"
    %tr
      %td
        Interest Received
      %td.lightpurple
        =(@payments and @payments[:interest]) ? @payments[:interest].to_currency : "0"
      %td.purple
        =(@total_payments and @total_payments[:interest]) ? @total_payments[:interest].to_currency : "0"
    %tr
      %td
        Fee Received
      %td.lightpurple
      %td.purple
    -@fees.each do |fee, amount|
      %tr
        %td
          %b 
            = fee
        %td.lightpurple
          - if amount
            = amount.to_currency
          - else
            0
        %td.purple
          - if @total_fees[fee]
            = @total_fees[fee].to_currency
          - else
            0
    %tr
      %td
        Amount Outstanding
      %td{:colspan => "2"}
        =(@loan_data and @loan_data.length>0 and @loan_data.first.actual_outstanding_principal) ? @loan_data[0].actual_outstanding_principal.to_currency : "-"
    %tr
      %td
        Total Principal Overdue
      %td{:colspan => "2"}
        =(@defaulted and @defaulted.principal_due) ? @defaulted.principal_due.to_currency : 0
    %tr
      %td
        Total Interest Overdue
      %td{:colspan => "2"}
        -if @defaulted and @defaulted.total_due and @defaulted.principal_due
          =(@defaulted.total_due-@defaulted.principal_due).to_currency
        -else
          0
    -if @centers and not @obj.class==StaffMember
      %tr
        %td
          Number of center managers
        %td
          = @centers[:upto].managers.count if @centers[:upto] and @centers[:upto].length>0
    -if @centers and not @obj.class==StaffMember
      %tr
        %td
          Center Managers
        %td
          %ul
            = @centers[:upto].managers.collect{|sm| "<li>#{link_to(sm.name, resource(sm))}</li>"}.join if @centers[:upto] and @centers[:upto].length>0
