=partial :form
%table.report
  %tr.header
    %th
      Staff
    %th{:colspan => "3"}
      Loan amount
    %th{:colspan => "4"}
      Payment
    %th{:colspan => "3"}
      Balance outstanding
    %th{:colspan => "3"}
      Balance Overdue
    %th{:colspan => "3"}
      Advance payment
  %tr.header
    %th
    %th
      Applied
    %th
      Sanctioned
    %th
      Disbursed
    %th
      Principal
    %th
      Interest
    %th
      Fee
    %th
      Total
    %th
      Principal
    %th
      Interest
    %th
      Total
    %th
      Principal
    %th
      Interest
    %th
      Total
    %th
      Principal
    %th
      Interest
    %th
      Total
  - center_id, branch_id = nil, nil
  - length = 16
  - org_total = []
  -@data.sort_by{|branch, x| branch.name}.each do |branch, years|
    -if years.keys.length>0
      -branch_total = []
      %tr.branch#year
        %td{:colspan => length+1}
          %b
            =branch.name
      -years.sort_by{|year, quaters| year}.each do |year, quaters|
        -year_total = []
        -if quaters.keys.length>0
          %tr.center#quater
            %td{:colspan => length+1}
              %b
                ="#{year} - #{year+1}"
          -quaters.sort_by{|quater, months| quater}.each do |quater, months|
            %tr.group#quater
              %td{:colspan => length+1}
                Quater
                =quater
              -quater_total = Array.new(length, 0)
              -months.sort_by{|month, data| QuaterConsolidatedReport::MONTHS.index(month)}.each do |month, data|
                %tr.date#month
                  %td
                    =month.to_s.capitalize
                  -data.each_with_index do |ele, idx|
                    - ele = (data[3]+data[4]+data[5]) if idx==6
                    %td
                      =ele.to_i
                      -idx>6 ? quater_total[idx]=ele : quater_total[idx]+=ele
            %tr.group_total
              %td
                %b==Quater total:
                -year_total.push(quater_total)
              -quater_total.each do |ele|
                %td
                  %b
                    =ele.to_i
        %tr.center_total
          %td
            %b==Year total:
          - year_total = year_total[0..-2].map{|x| x[0..6]+Array.new(x.length-7,0)} + [year_total[-1]] if year_total.length>0
          - branch_total << year_total.transpose.collect{|arr| arr.reduce{|s, x| s+=x}}
          - branch_total.last.each do |ele|
            %td
              %b
                =ele.to_i
      %tr.branch_total
        %td
          %b==Branch total:
        - branch_total = branch_total[0..-2].map{|x| x[0..6]+Array.new(x.length-7,0)} + [branch_total[-1]] if branch_total.length>0
        - org_total << branch_total.transpose.collect{|arr| arr.reduce{|s, x| s+=x}}
        - org_total.last.each do |ele|
          %td
            %b
              =ele.to_i
  %tr.org_total
    %td
      %b==Total
    -org_total.find_all{|x| x.length==length}.transpose.collect{|arr| arr.reduce{|s, x| s+=x}}.each do |ele|
      %td
        %b
          =ele.to_i

